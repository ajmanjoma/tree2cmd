Metadata-Version: 2.4
Name: tree2cmd
Version: 0.1.1
Summary: Convert ChatGPT/LLM-style folder tree text to real files and folders
Home-page: https://github.com/ajmanjoma/tree2cmd
Author: AnJoMa
Author-email: antonyjosephmathew1@gmail.com
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Intended Audience :: Developers
Classifier: Topic :: Utilities
Requires-Python: >=3.6
Description-Content-Type: text/markdown
License-File: LICENSE
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: license-file
Dynamic: requires-python
Dynamic: summary

Absolutely! I've cleaned up duplicates and improved the flow for clarity and conciseness, while keeping all the important details. Here’s the polished, non-redundant, and well-structured `README.md` for your `tree2cmd` project:

---

````markdown
# tree2cmd

> Convert tree-style directory text into shell commands (`mkdir` and `touch`).

`tree2cmd` is a CLI tool that parses a textual directory tree structure—including emojis and common tree characters—and generates shell commands to recreate the corresponding directories and files on your system.

---

## 🚀 Features

- Parse tree-like folder structures from file or standard input.
- Supports emojis and visual tree characters (`├──`, `│`, `└──`, etc.).
- Heuristically determines folders vs. files.
- Generates safe, escaped shell commands (`mkdir -p` for folders, `touch` for files).
- Optionally executes commands to create files/folders.
- Save generated commands into a shell script.
- Handles indentation-based nesting with configurable indent width.

---

## 📦 Installation

Create a Python virtual environment and install dependencies:

```bash
python3 -m venv venv
source venv/bin/activate
pip install --upgrade pip setuptools wheel
pip install -r requirements.txt
````

Alternatively, build and install locally:

```bash
python setup.py sdist bdist_wheel
pip install dist/tree2cmd-*.whl
```

---

## ⚙️ Usage Examples

### 1. Preview shell commands (dry-run):

```bash
venv/bin/tree2cmd sample.txt
```

### 2. Execute commands to create files and folders:

```bash
venv/bin/tree2cmd sample.txt --run
```

### 3. Save commands to a shell script:

```bash
venv/bin/tree2cmd sample.txt --save generate.sh
```

### 4. Read input from standard input:

```bash
cat sample.txt | venv/bin/tree2cmd --stdin
```

---

## 📖 Example

Given this input:

```text
📁 Project/
├── src/
│   └── main.py
└── README.md
```

The output commands are:

```bash
mkdir -p "Project/"
mkdir -p "Project/src/"
touch "Project/src/main.py"
touch "Project/README.md"
```

✅ The tree is correctly interpreted and recreated as shell commands.

---

## ✅ How `tree2cmd` Works

### 1. Input Parsing

Reads a tree-like text structure from a file or stdin. Supports emojis and tree characters as well as plain indented text.

### 2. Line Normalization

Strips emojis, special tree characters (like `📁`, `├──`, `│`), trailing slashes, and inline comments to get clean file or folder names.

### 3. Indentation Detection

Determines nesting depth by counting indentation, maintaining a stack of parent directories.

### 4. Folder or File Detection

* Names ending with `/` are folders.
* Names with extensions are files.
* If the next line is more indented, current line is considered a folder.

### 5. Command Generation

Generates shell commands:

* `mkdir -p` for directories (creates parent folders as needed).
* `touch` for files.

Special shell characters in names are safely escaped.

### 6. Execution (optional)

If `--run` is specified, commands are executed directly; otherwise, they are printed.

### 7. Saving Commands

If `--save <file>` is used, commands are written into a shell script.

---

## 🛠 Workflow Diagram

```
[ Tree Input File ]
        │
        ▼
[ Parse & Normalize Lines ]
        │
        ▼
[ Detect Indentation & Nesting ]
        │
        ▼
[ Classify as Folder or File ]
        │
        ▼
[ Generate mkdir / touch Commands ]
        │
   ┌────┴────┐
   ▼         ▼
Dry-run    --run
(Print)   (Execute)
```

---

## 🛠 Development & Testing

Run unit tests:

```bash
python -m unittest discover tests
```

Preview commands during development:

```bash
make venv install
make preview FILE=sample.txt
```

---

## 🤝 Contributing

Contributions and bug reports are welcome! Please open issues or pull requests on GitHub.

---

## 📜 License

This project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.

---

